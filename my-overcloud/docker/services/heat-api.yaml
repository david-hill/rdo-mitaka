heat_template_version: pike

description: >
  OpenStack containerized Heat API service

parameters:
  DockerNamespace:
    description: namespace
    default: 'tripleoupstream'
    type: string
  DockerHeatApiImage:
    description: image
    default: 'centos-binary-heat-api:latest'
    type: string
  # puppet needs the heat-wsgi-api binary from centos-binary-heat-api
  DockerHeatConfigImage:
    description: image
    default: 'centos-binary-heat-api:latest'
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json


resources:

  ContainersCommon:
    type: ./containers-common.yaml

  HeatBase:
    type: ../../puppet/services/heat-api.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}

outputs:
  role_data:
    description: Role data for the Heat API role.
    value:
      service_name: {get_attr: [HeatBase, role_data, service_name]}
      config_settings:
        map_merge:
          - get_attr: [HeatBase, role_data, config_settings]
          - apache::default_vhost: false
      step_config: &step_config
        get_attr: [HeatBase, role_data, step_config]
      service_config_settings: {get_attr: [HeatBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: heat_api
        puppet_tags: heat_config,file,concat,file_line
        step_config: *step_config
        config_image:
          list_join:
            - '/'
            - [ {get_param: DockerNamespace}, {get_param: DockerHeatConfigImage} ]
      kolla_config:
        /var/lib/kolla/config_files/heat_api.json:
          command: /usr/sbin/httpd -DFOREGROUND
      docker_config:
        step_4:
          heat_api:
            image:
              list_join:
                - '/'
                - [ {get_param: DockerNamespace}, {get_param: DockerHeatApiImage} ]
            net: host
            privileged: false
            restart: always
            # NOTE(mandre) kolla image changes the user to 'heat', we need it
            # to be root to run httpd
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/heat_api.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/heat_api/etc/heat/:/etc/heat/:ro
                  - /var/lib/config-data/heat_api/etc/httpd/:/etc/httpd/:ro
                  - /var/lib/config-data/heat_api/var/www/:/var/www/:ro
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      upgrade_tasks:
        - name: Stop and disable heat_api service
          tags: step2
          service: name=httpd state=stopped enabled=no
